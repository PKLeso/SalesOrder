{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport * as signalR from '@microsoft/signalr';\nimport { Subject } from 'rxjs';\nimport { environment } from 'src/environments/environment.dev';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-toastr\";\nimport * as i2 from \"@angular/router\";\nexport let SignalrService = /*#__PURE__*/(() => {\n  class SignalrService {\n    constructor(toastr, router) {\n      this.toastr = toastr;\n      this.router = router;\n      this.signalrSubject = new Subject(); // Always emit an event if there's a change\n\n      this.isSignalrAuthenticated = false;\n\n      this.startConnection = () => {\n        this.hubConnection$ = new signalR.HubConnectionBuilder().withUrl(environment.chatUrl, {\n          // The belowHelps to avoid CORS issues and improves performance for SignalR\n          skipNegotiation: true,\n          transport: signalR.HttpTransportType.WebSockets\n        }).withAutomaticReconnect().build();\n        this.hubConnection$.start().then(() => {\n          this.signalrSubject.next({\n            type: \"HubConnStarted\"\n          });\n        }).catch(err => console.log('The following error has occured while starting the hub connection: ', err));\n      };\n    }\n\n    signalrSubjObject() {\n      return this.signalrSubject.asObservable();\n    }\n\n    ChatAuth(userN, passW) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let userInfo = {\n          username: userN,\n          password: passW\n        };\n        yield this.hubConnection$.invoke(\"ChatAuth\", userInfo).finally(() => {\n          this.toastr.info(\"Login in attemp...\");\n        }).catch(err => console.error(err));\n      });\n    }\n\n    chatAuthListenerSuccess() {\n      this.hubConnection$.on(\"ChatAuthSuccessResponse\", user => {\n        localStorage.setItem(\"userId\", user.id);\n        this.userData$ = Object.assign({}, user);\n        this.isSignalrAuthenticated = true;\n        this.toastr.success(\"Login successful!\");\n        this.router.navigateByUrl(\"/chat\");\n      });\n    }\n\n    chatAuthFailResponse() {\n      this.hubConnection$.on(\"ChatAuthFailResponse\", () => {\n        this.toastr.error(\"Invalid login attempt!\");\n      });\n    }\n\n    reauthChat(userId) {\n      return __awaiter(this, void 0, void 0, function* () {\n        yield this.hubConnection$.invoke(\"ReauthChat\", userId).then(() => this.toastr.info(\"Login in attempt...\")).catch(err => console.error(err));\n      });\n    }\n\n    reauthenticateListener() {\n      this.hubConnection$.on(\"ReauthenticateResponse\", user => {\n        localStorage.setItem(\"userId\", user.id);\n        this.userData$ = Object.assign({}, user);\n        this.isSignalrAuthenticated = true;\n        this.toastr.success(\"Re-authenticated!\");\n\n        if (this.router.url == \"/login\") {\n          this.router.navigateByUrl(\"/chat\");\n        }\n      });\n    }\n\n  }\n\n  SignalrService.ɵfac = function SignalrService_Factory(t) {\n    return new (t || SignalrService)(i0.ɵɵinject(i1.ToastrService), i0.ɵɵinject(i2.Router));\n  };\n\n  SignalrService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SignalrService,\n    factory: SignalrService.ɵfac,\n    providedIn: 'root'\n  });\n  return SignalrService;\n})();","map":null,"metadata":{},"sourceType":"module"}